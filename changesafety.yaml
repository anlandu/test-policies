apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sazurev1changesafetyverification
  annotations:
    metadata.gatekeeper.sh/title: "change safety verification verification"
    metadata.gatekeeper.sh/version: 1.0.0
    metadata.gatekeeper.sh/requires-external-data-source: change-safety
spec:
  crd:
    spec:
      names:
        kind: K8sAzureV1ChangeSafetyVerification
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sazurev1changesafetyverification

        Only validate resources matched by gatekeeper-change-safety-validating-webhook-configuration
        is_target {
            input.review.kind.group == "edge.microsoft.com"
        }

        default DEFAULT_CHANGE_SAFETY_INFRA_GROUPS=["", "rbac.authorization.k8s.io", "apps", "policy", "expansion.gatekeeper.sh", "config.gatekeeper.sh"]
        default DEFAULT_CHANGE_SAFETY_INFRA_KINDS=["Deployment","Pod","ServiceAccount","Secret","Role","ClusterRole","RoleBinding","ClusterRoleBinding","PodDisruptionBudget","ExpansionTemplate","Service","ResourceQuota","Namespace","ConfigMap","Config"]
        default DEFAULT_CHANGE_SAFETY_POLICY_GROUPS=["externaldata.gatekeeper.sh","mutations.gatekeeper.sh","status.gatekeeper.sh","templates.gatekeeper.sh","constraints.gatekeeper.sh"]

        is_target {
            input.review.kind.group == DEFAULT_CHANGE_SAFETY_INFRA_GROUPS[_]
            input.review.kind.kind == DEFAULT_CHANGE_SAFETY_INFRA_KINDS[_]
            startswith(input.review.object.metadata.name, "gatekeeper")
        }

        is_target {
            input.review.kind.group == DEFAULT_CHANGE_SAFETY_INFRA_GROUPS[_]
            input.review.kind.kind == DEFAULT_CHANGE_SAFETY_INFRA_KINDS[_]
            startswith(input.review.object.metadata.name, "azure-policy")
        }


        is_target {
            input.review.kind.group == DEFAULT_CHANGE_SAFETY_POLICY_GROUPS[_]
            startswith(input.review.object.metadata.name, "change-safety")
        }

        is_target {
            input.review.kind.group == DEFAULT_CHANGE_SAFETY_POLICY_GROUPS[_]
            contains(input.review.object.metadata.name, "changesafety")
        }

        # Get data from change safety external data source
        remote_data := response{
            is_target
            response := external_data({"provider": "change-safety-provider", "keys": ["foo"]})
        }

        # Base Gatekeeper violation
        violation[{"msg": msg}] {
            is_target
            general_violation[{"result": msg}]
        }

        # Check if there are any errors calling ed provider
        general_violation[{"result": result}] {
            remote_data.system_error != ""
            result := sprintf("System error calling external data provider: %s", [remote_data.system_error])
        }

        # Check if there are errors during validation
        general_violation[{"result": result}] {
            remote_data.system_error == ""
            count(remote_data.errors) > 0
            result := sprintf("Error validating one or more images: %s", [remote_data.errors])
        }

        general_violation[{"result": result}] {
            remote_data.system_error == ""
            subject_validation := remote_data.responses[_]
            verifierReport := subject_validation[1].verifierReports[_]
            not verifierReport.isSuccess
            result := sprintf("Change safety verification failed; Subject: %s; Error: %s", [subject_validation[0], verifierReport.message])
        }
